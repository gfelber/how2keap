diff --git a/keap/src/Makefile b/keap/src/Makefile
new file mode 100644
index 00000000..8fc6c476
--- /dev/null
+++ b/keap/src/Makefile
@@ -0,0 +1,10 @@
+obj-m	:= keap.o
+subdir-ccflags-y := -I$(src)/include
+subdir-ccflags-y += -Wall -g
+ 
+PWD := $(shell pwd)
+ 
+modules:
+	$(MAKE) -C '$(LINUX_DIR)' M='$(PWD)' modules
+clean:
+	$(MAKE) -C '$(LINUX_DIR)' M='$(PWD)' clean
diff --git a/keap/src/keap.c b/keap/src/keap.c
new file mode 100644
index 00000000..77e8269d
--- /dev/null
+++ b/keap/src/keap.c
@@ -0,0 +1,67 @@
+#include <linux/fs.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/proc_fs.h>
+#include <linux/seq_file.h>
+#include <linux/slab.h>
+#include <linux/uaccess.h>
+
+#include "keap.h"
+
+static long keap_ioctl(struct file *filp, unsigned int cmd, unsigned long arg) {
+  struct keap_transfer transfer;
+  struct keap_malloc_param param;
+
+  switch (cmd) {
+  case KEAP_IOCTL_MALLOC:
+    if (copy_from_user(&param, (void __user *)arg, sizeof(param)))
+      return -EFAULT;
+    printk("keap: allocate 0x%lx with flags 0x%x\n", param.size, param.flags);
+    param.heap_ptr = kvmalloc(param.size, param.flags);
+    return copy_to_user((void __user *)arg, &param, sizeof(param));
+
+  case KEAP_IOCTL_READ:
+    if (copy_from_user(&transfer, (void __user *)arg, sizeof(transfer)))
+      return -EFAULT;
+    printk("keap: copy %p to %p (user) (size: 0x%lx)\n", transfer.heap_ptr,
+           transfer.buf, transfer.size);
+    return raw_copy_to_user(transfer.buf, transfer.heap_ptr, transfer.size);
+
+  case KEAP_IOCTL_WRITE:
+    if (copy_from_user(&transfer, (void __user *)arg, sizeof(transfer)))
+      return -EFAULT;
+    printk("keap: copy %p (user) to %p (size: 0x%lx)\n", transfer.buf,
+           transfer.heap_ptr, transfer.size);
+    return raw_copy_from_user(transfer.heap_ptr, transfer.buf, transfer.size);
+
+  case KEAP_IOCTL_FREE:
+    printk("keap: free %p\n", (void *)arg);
+    kvfree((void *)arg);
+    return 0;
+  }
+
+  return -EINVAL;
+}
+
+static const struct proc_ops keap_fops = {
+    .proc_ioctl = keap_ioctl,
+};
+
+static int keap_init(void) {
+  pr_info("keap: initialize\n");
+  proc_create("keap", 0666, NULL, &keap_fops);
+  return 0;
+}
+
+static void keap_exit(void) {
+  pr_info("keap: exit\n");
+  remove_proc_entry("keap", NULL);
+}
+
+module_init(keap_init);
+module_exit(keap_exit);
+
+MODULE_AUTHOR("\x06\xfe\x1b\xe2");
+MODULE_DESCRIPTION("keap a debloated heap allocation interface");
+MODULE_LICENSE("GPL");
diff --git a/keap/src/keap.h b/keap/src/keap.h
new file mode 100644
index 00000000..f91a1146
--- /dev/null
+++ b/keap/src/keap.h
@@ -0,0 +1,24 @@
+#ifndef _KEAP_H
+#define _KEAP_H
+
+#define DEVICE_NAME "keap"
+#define CLASS_NAME DEVICE_NAME
+
+struct keap_malloc_param {
+  unsigned int flags;
+  size_t size;
+  void *heap_ptr;
+};
+
+struct keap_transfer {
+  void *heap_ptr;
+  void __user *buf;
+  size_t size;
+};
+
+#define KEAP_IOCTL_MALLOC _IOW('K', 0, struct keap_malloc_param *)
+#define KEAP_IOCTL_READ _IOW('K', 1, struct keap_transfer *)
+#define KEAP_IOCTL_WRITE _IOW('K', 2, struct keap_transfer *)
+#define KEAP_IOCTL_FREE _IOW('K', 3, void *)
+
+#endif
diff --git a/keap_frag_config b/keap_frag_config
new file mode 100644
index 00000000..f405caba
--- /dev/null
+++ b/keap_frag_config
@@ -0,0 +1,5 @@
+CONFIG_USER_NS=y
+CONFIG_BPF_JIT=y
+CONFIG_BPF_JIT_ALWAYS_ON=y
+CONFIG_BPF_JIT_DEFAULT_ON=y
+
diff --git a/package/Config.in b/package/Config.in
index 6fe2339a..7f191bd0 100644
--- a/package/Config.in
+++ b/package/Config.in
@@ -2964,3 +2964,10 @@ menu "Text editors and viewers"
 endmenu
 
 endmenu
+
+menu "Kernel exploitation"
+	source "package/keap/Config.in"
+	source "package/nosu/Config.in"
+	source "package/nsjail/Config.in"
+endmenu
+
diff --git a/package/busybox/busybox.config b/package/busybox/busybox.config
index 823fcd2b..e0bc3abe 100644
--- a/package/busybox/busybox.config
+++ b/package/busybox/busybox.config
@@ -1100,7 +1100,7 @@ CONFIG_WATCH=y
 # Runit Utilities
 #
 # CONFIG_CHPST is not set
-# CONFIG_SETUIDGID is not set
+CONFIG_SETUIDGID=y
 # CONFIG_ENVUIDGID is not set
 # CONFIG_ENVDIR is not set
 # CONFIG_SOFTLIMIT is not set
@@ -1155,7 +1155,7 @@ CONFIG_ASH_SLEEP=y
 CONFIG_ASH_HELP=y
 CONFIG_ASH_GETOPTS=y
 CONFIG_ASH_CMDCMD=y
-# CONFIG_CTTYHACK is not set
+CONFIG_CTTYHACK=y
 # CONFIG_HUSH is not set
 # CONFIG_SHELL_HUSH is not set
 # CONFIG_HUSH_BASH_COMPAT is not set
diff --git a/package/keap/Config.in b/package/keap/Config.in
new file mode 100644
index 00000000..e16063cd
--- /dev/null
+++ b/package/keap/Config.in
@@ -0,0 +1,5 @@
+config BR2_PACKAGE_KEAP
+       bool "keap"
+       help
+               keap, kernel heap playground
+
diff --git a/package/keap/keap.mk b/package/keap/keap.mk
new file mode 100644
index 00000000..2ab8893e
--- /dev/null
+++ b/package/keap/keap.mk
@@ -0,0 +1,13 @@
+KEAP_MODULE_VERSION = 1.0
+KEAP_SITE = ./keap/src
+KEAP_SITE_METHOD = local
+KEAP_LICENSE = GPLv3
+KEAP_LICENSE_FILES = COPYING
+ 
+define KERNEL_MODULE_BUILD_CMDS
+	$(MAKE) -C '$(@D)' LINUX_DIR='$(LINUX_DIR)' CC='$(TARGET_CC)' LD='$(TARGET_LD)' modules
+endef
+
+$(eval $(kernel-module))
+$(eval $(generic-package))
+
diff --git a/package/nosu/Config.in b/package/nosu/Config.in
new file mode 100644
index 00000000..ecc3e195
--- /dev/null
+++ b/package/nosu/Config.in
@@ -0,0 +1,5 @@
+config BR2_PACKAGE_NOSU
+       bool "nosu"
+       help
+               Simple privilege escalation
+
diff --git a/package/nosu/nosu.mk b/package/nosu/nosu.mk
new file mode 100644
index 00000000..d14b8331
--- /dev/null
+++ b/package/nosu/nosu.mk
@@ -0,0 +1,17 @@
+NOSU_VERSION = 2.0.0
+NOSU_SITE = $(call github,gfelber,nosu,$(NOSU_VERSION))
+
+define NOSU_BUILD_CMDS
+        $(MAKE) CC="$(TARGET_CC)" LD="$(TARGET_LD)" -C $(@D) all
+endef
+
+define NOSU_INSTALL_TARGET_CMDS
+        $(INSTALL) -D -m 0755 $(@D)/nosu $(TARGET_DIR)/bin
+endef
+
+define NOSU_PERMISSIONS
+       /bin/nosu f 4755 0 0 - - - - -
+endef
+
+
+$(eval $(generic-package))
diff --git a/package/nsjail/Config.in b/package/nsjail/Config.in
new file mode 100644
index 00000000..c8793bf2
--- /dev/null
+++ b/package/nsjail/Config.in
@@ -0,0 +1,9 @@
+config BR2_PACKAGE_NSJAIL
+	bool "nsjail"
+	select BR2_PACKAGE_LIBTOOL
+	select BR2_PACKAGE_LIBCAP
+	select BR2_PACKAGE_PROTOBUF
+	select BR2_PACKAGE_LIBSECCOMP
+	select BR2_PACKAGE_LIBNL
+	help
+	  NsJail is a process isolation tool for Linux
diff --git a/package/nsjail/nsjail.mk b/package/nsjail/nsjail.mk
new file mode 100644
index 00000000..a9059c59
--- /dev/null
+++ b/package/nsjail/nsjail.mk
@@ -0,0 +1,20 @@
+NSJAIL_VERSION = master
+NSJAIL_SITE = https://github.com/google/nsjail
+NSJAIL_SITE_METHOD = git
+NSJAIL_GIT_SUBMODULES = YES
+NSJAIL_DEPENDENCIES = protobuf libcap libseccomp libnl libtool host-pkgconf host-autoconf host-bison host-flex
+
+define NSJAIL_BUILD_CMDS
+        LD_LIBRARY_PATH="$(HOST_DIR)/lib" PATH="$(HOST_DIR)/bin:$(PATH)" $(MAKE) CC="$(TARGET_CC)" CXX="$(TARGET_CXX)" LD="$(TARGET_LD)" -C $(@D) all
+endef
+
+define NSJAIL_INSTALL_TARGET_CMDS
+        $(INSTALL) -D -m 0755 $(@D)/nsjail $(TARGET_DIR)/bin
+endef
+
+define NSJAIL_PERMISSIONS
+       /bin/nsjail f 0755 0 0 - - - - -
+endef
+
+
+$(eval $(generic-package))
diff --git a/system/skeleton/etc/issue b/system/skeleton/etc/issue
new file mode 100644
index 00000000..0332cd0e
--- /dev/null
+++ b/system/skeleton/etc/issue
@@ -0,0 +1,11 @@
+####################################################
+#                                                  #
+#    Tired of bloated heap implementations?        #
+#          __                                      #
+#         |  | __ ____ _____  ______               #
+#         |  |/ // __ \\__  \ \____ \              #
+#         |    <\  ___/ / __ \|  |_> >             #
+#    use  |__|_ \\___  >____  /   __/              #
+#              \/    \/     \/|__|                 #
+#                                                  #
+####################################################
diff --git a/system/skeleton/etc/nsjail.cfg b/system/skeleton/etc/nsjail.cfg
new file mode 100644
index 00000000..357fa5a4
--- /dev/null
+++ b/system/skeleton/etc/nsjail.cfg
@@ -0,0 +1,114 @@
+# Copyright 2020 Google LLC
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# See options available at https://github.com/google/nsjail/blob/master/config.proto
+
+name: "keap-nsjail-configuration"
+description: "keap nsjail configuration"
+
+mode: ONCE
+log_level: ERROR
+clone_newnet: false
+no_pivotroot: true
+uidmap {inside_id: "1000"}
+gidmap {inside_id: "1000"}
+rlimit_as_type: HARD
+rlimit_nofile_type: HARD
+rlimit_nproc_type: HARD
+rlimit_cpu_type: INF
+time_limit: 3600
+rlimit_fsize: 20 # in MB
+skip_setsid: true
+
+mount: [
+  {
+    src: "/chroot"
+    dst: "/"
+    is_bind: true
+  },
+  {
+    src: "/pwn"
+    dst: "/pwn"
+    is_bind: true
+    rw: true
+  },
+  {
+    src: "/etc"
+    dst: "/etc"
+    is_bind: true
+    nosuid: true
+    rw: false
+  },
+  {
+    src: "/bin"
+    dst: "/bin"
+    is_bind: true
+    nosuid: true
+    rw: false
+  },
+  {
+    src: "/lib"
+    dst: "/lib"
+    is_bind: true
+    nosuid: true
+    rw: false
+  },
+  {
+    src: "/lib64"
+    dst: "/lib64"
+    is_bind: true
+    nosuid: true
+    rw: false
+  },
+  {
+    src: "/dev/null"
+    dst: "/dev/null"
+    is_bind: true
+    rw: true
+  },
+  {
+    src: "/dev/zero"
+    dst: "/dev/zero"
+    is_bind: true
+    rw: true
+  },
+  {
+    src: "/dev/urandom"
+    dst: "/dev/urandom"
+    is_bind: true
+    rw: true
+  },
+  {
+    src: "/dev/random"
+    dst: "/dev/random"
+    is_bind: true
+    rw: true
+  },
+  {
+    src: "/dev/full"
+    dst: "/dev/full"
+    is_bind: true
+    rw: true
+  },
+  {
+    dst: "/tmp"
+    fstype: "tmpfs"
+    rw: true
+  },
+  {
+    dst: "/proc"
+    fstype: "proc"
+    rw: true
+  }
+]
diff --git a/system/skeleton/init b/system/skeleton/init
new file mode 100755
index 00000000..f51e5c85
--- /dev/null
+++ b/system/skeleton/init
@@ -0,0 +1,51 @@
+#!/bin/sh
+# devtmpfs does not get automounted for initramfs
+/bin/mount -t devtmpfs devtmpfs /dev
+/bin/mount -t proc none /proc
+/bin/mount -t sysfs none /sys
+/bin/mount -t tmpfs none /tmp
+
+# use the /dev/console device node from devtmpfs if possible to not
+# confuse glibc's ttyname_r().
+# This may fail (E.G. booted with console=), and errors from exec will
+# terminate the shell, so use a subshell for the test
+if (exec 0</dev/console) 2>/dev/null; then
+    exec 0</dev/console
+    exec 1>/dev/console
+    exec 2>/dev/console
+fi
+
+# setup keap kmod
+ln -s /lib/modules/*/updates/keap.ko /keap.ko
+insmod /keap.ko
+
+# flag link
+chmod 000 /dev/sda
+ln -s /dev/sda /flag
+
+# exploit link
+cp /dev/sdb /pwn
+chmod 777 /pwn
+
+cat /etc/issue
+
+if grep -q "pwn" /proc/cmdline; then
+  SHELL="/pwn"
+else
+  SHELL="/bin/sh"
+fi
+
+if grep -q "init=/bin/sh" /proc/cmdline; then
+  $SHELL # root
+elif grep -q nsjail /proc/cmdline; then
+  mkdir -p /chroot
+  nsjail --chroot /chroot --config /etc/nsjail.cfg --hostname nsjail --disable_clone_newuser -- $SHELL
+else
+  setsid /bin/cttyhack setuidgid 1000 $SHELL # normal user
+fi
+
+
+umount /proc
+umount /sys
+poweroff -d 0  -f
+
